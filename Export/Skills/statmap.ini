#
# Skill data modifiers
#
[base_skill_effect_duration]
mod = skill("duration", {val})
div = 1000
[base_secondary_skill_effect_duration]
mod = skill("durationSecondary", {val})
div = 1000
[spell_minimum_base_physical_damage]
[secondary_minimum_base_physical_damage]
mod = skill("PhysicalMin", {val})
[spell_maximum_base_physical_damage]
[secondary_maximum_base_physical_damage]
mod = skill("PhysicalMax", {val})
[spell_minimum_base_lightning_damage]
[secondary_minimum_base_lightning_damage]
mod = skill("LightningMin", {val})
[spell_maximum_base_lightning_damage]
[secondary_maximum_base_lightning_damage]
mod = skill("LightningMax", {val})
[spell_minimum_base_cold_damage]
[secondary_minimum_base_cold_damage]
mod = skill("ColdMin", {val})
[spell_maximum_base_cold_damage]
[secondary_maximum_base_cold_damage]
mod = skill("ColdMax", {val})
[spell_minimum_base_fire_damage]
[secondary_minimum_base_fire_damage]
mod = skill("FireMin", {val})
[spell_maximum_base_fire_damage]
[secondary_maximum_base_fire_damage]
mod = skill("FireMax", {val})
[spell_minimum_base_chaos_damage]
[secondary_minimum_base_chaos_damage]
mod = skill("ChaosMin", {val})
[spell_maximum_base_chaos_damage]
[secondary_maximum_base_chaos_damage]
mod = skill("ChaosMax", {val})
[spell_minimum_base_lightning_damage_per_power_charge]
mod = skill("LightningMin", {val}, { type = "Multiplier", var = "PowerCharge" })
[spell_maximum_base_lightning_damage_per_power_charge]
mod = skill("LightningMax", {val}, { type = "Multiplier", var = "PowerCharge" })
[spell_minimum_base_fire_damage_per_endurance_charge]
mod = skill("FireMin", {val}, { type = "Multiplier", var = "EnduranceCharge" })
[spell_maximum_base_fire_damage_per_endurance_charge]
mod = skill("FireMax", {val}, { type = "Multiplier", var = "EnduranceCharge" })
[spell_minimum_base_cold_damage_per_frenzy_charge]
mod = skill("ColdMin", {val}, { type = "Multiplier", var = "FrenzyCharge" })
[spell_maximum_base_cold_damage_per_frenzy_charge]
mod = skill("ColdMax", {val}, { type = "Multiplier", var = "FrenzyCharge" })
[spell_minimum_base_cold_damage_+_per_10_intelligence]
mod = skill("ColdMin", {val}, { type = "PerStat", stat = "Int", div = 10 })
[spell_maximum_base_cold_damage_+_per_10_intelligence]
mod = skill("ColdMax", {val}, { type = "PerStat", stat = "Int", div = 10 })
[base_cold_damage_to_deal_per_minute]
mod = skill("ColdDot", {val})
div = 60
[base_fire_damage_to_deal_per_minute]
mod = skill("FireDot", {val})
div = 60
[base_chaos_damage_to_deal_per_minute]
mod = skill("ChaosDot", {val})
div = 60
[base_skill_show_average_damage_instead_of_dps]
mod = skill("showAverage", true)
[cast_time_overrides_attack_duration]
mod = skill("castTimeOverridesAttackTime", true)
[global_always_hit]
mod = skill("cannotBeEvaded", true)
[bleed_duration_is_skill_duration]
mod = skill("bleedDurationIsSkillDuration", true)
[poison_duration_is_skill_duration]
mod = skill("poisonDurationIsSkillDuration", true)
[spell_damage_modifiers_apply_to_skill_dot]
mod = skill("dotIsSpell", true)
[projectile_damage_modifiers_apply_to_skill_dot]
mod = skill("dotIsProjectile", true)
[base_use_life_in_place_of_mana]
mod = flag("SkillBloodMagic")
[base_active_skill_totem_level]
[totem_support_gem_level]
mod = skill("totemLevel", {val})
[spell_uncastable_if_triggerable]
[unique_mjolner_lightning_spells_triggered]
[unique_cospris_malice_cold_spells_triggered]
mod = skill("triggered", true, { type = "SkillType", skillType = SkillType.TriggerableSpell })
[skill_double_hits_when_dual_wielding]
mod = skill("doubleHitsWhenDualWielding", true)
[base_spell_repeat_count]
mod = skill("repeatCount", {val})
[display_minion_monster_level]
mod = skill("minionLevel", {val})
[display_skill_minions_level_is_corpse_level]
mod = skill("minionLevelIsEnemyLevel", true)
[active_skill_minion_added_damage_+%_final]
mod = skill("minionDamageEffectiveness", {val})
[base_bleed_on_hit_still_%_of_physical_damage_to_deal_per_minute]
mod = skill("bleedBasePercent", {val})
div = 60
[active_skill_base_radius_+]
mod = skill("radiusExtra", {val})
[corpse_explosion_monster_life_%]
mod = skill("corpseExplosionLifeMultiplier", {val})
div = 100
[spell_base_fire_damage_%_maximum_life]
mod = skill("selfFireExplosionLifeMultiplier", {val})
div = 100
[deal_chaos_damage_per_second_for_10_seconds_on_hit]
mod = mod("SkillData", "LIST", { key = "decay", value = {val}, merge = "MAX" })

#
# Defensive modifiers
#
[base_physical_damage_reduction_rating]
mod = mod("Armour", "BASE", {val}, 0, 0, {global})
[base_evasion_rating]
mod = mod("Evasion", "BASE", {val}, 0, 0, {global})
[base_maximum_energy_shield]
mod = mod("EnergyShield", "BASE", {val}, 0, 0, {global})
[base_fire_damage_resistance_%]
mod = mod("FireResist", "BASE", {val}, 0, 0, {global})
[base_cold_damage_resistance_%]
mod = mod("ColdResist", "BASE", {val}, 0, 0, {global})
[base_lightning_damage_resistance_%]
mod = mod("LightningResist", "BASE", {val}, 0, 0, {global})
[base_chaos_damage_resistance_%]
mod = mod("ChaosResist", "BASE", {val}, 0, 0, {global})
[base_resist_all_elements_%]
mod = mod("ElementalResist", "BASE", {val}, 0, 0, {global})
[base_maximum_fire_damage_resistance_%]
mod = mod("FireResistMax", "BASE", {val}, 0, 0, {global})
[base_maximum_cold_damage_resistance_%]
mod = mod("ColdResistMax", "BASE", {val}, 0, 0, {global})
[base_maximum_lightning_damage_resistance_%]
mod = mod("LightningResistMax", "BASE", {val}, 0, 0, {global})
[base_stun_recovery_+%]
mod = mod("StunRecovery", "INC", {val}, 0, 0, {global})
[base_life_gain_per_target]
mod = mod("LifeOnHit", "BASE", {val}, ModFlag.Attack, 0, {global})
[base_life_regeneration_rate_per_minute]
mod = mod("LifeRegen", "BASE", {val}, 0, 0, {global})
div = 60
[life_regeneration_rate_per_minute_%]
mod = mod("LifeRegenPercent", "BASE", {val}, 0, 0, {global})
div = 60
[base_mana_regeneration_rate_per_minute]
mod = mod("ManaRegen", "BASE", {val}, 0, 0, {global})
div = 60
[energy_shield_recharge_rate_+%]
mod = mod("EnergyShieldRecharge", "INC", {val}, 0, 0, {global})
[base_mana_cost_-%]
mod = mod("ManaCost", "INC", {val})
mult = -1
[no_mana_cost]
mod = mod("ManaCost", "MORE", -100, 0, 0, {global})
[base_chance_to_dodge_%]
mod = mod("AttackDodgeChance", "BASE", {val}, 0, 0, {global})
[base_chance_to_dodge_spells_%]
mod = mod("SpellDodgeChance", "BASE", {val}, 0, 0, {global})
[base_movement_velocity_+%]
mod = mod("MovementSpeed", "INC", {val}, 0, 0, {global})
[monster_base_block_%]
mod = mod("BlockChance", "BASE", {val}, 0, 0, {global})
[base_spell_block_%]
mod = mod("SpellBlockChance", "BASE", {val}, 0, 0, {global})
[life_leech_from_any_damage_permyriad]
mod = mod("DamageLifeLeech", "BASE", {val})
div = 100
[mana_leech_from_any_damage_permyriad]
mod = mod("DamageManaLeech", "BASE", {val})
div = 100
[life_leech_from_physical_attack_damage_permyriad]
mod = mod("PhysicalDamageLifeLeech", "BASE", {val}, ModFlag.Attack, 0, {global})
div = 100
[life_leech_speed_+%]
mod = mod("LifeLeechRate", "INC", {val})
[mana_leech_speed_+%]
mod = mod("ManaLeechRate", "INC", {val})

#
# Offensive modifiers
#
# Speed
[attack_and_cast_speed_+%]
mod = mod("Speed", "INC", {val})
[cast_speed_+%_granted_from_skill]
mod = mod("Speed", "INC", {val}, ModFlag.Cast, 0, {global})
# AoE
[base_skill_area_of_effect_+%]
mod = mod("AreaOfEffect", "INC", {val})
[base_aura_area_of_effect_+%]
mod = mod("AreaOfEffect", "INC", {val}, 0, KeywordFlag.Aura)
# Critical strikes
[additional_base_critical_strike_chance]
mod = mod("CritChance", "BASE", {val}, 0, 0, {curse})
div = 100
[critical_strike_chance_+%]
mod = mod("CritChance", "INC", {val}, 0, 0, {curse})
[base_critical_strike_multiplier_+]
mod = mod("CritMultiplier", "BASE", {val}, 0, 0, {curse})
# Duration
[buff_effect_duration_+%_per_endurance_charge]
mod = mod("Duration", "INC", {val}, 0, 0, { type = "Multiplier", var = "EnduranceCharge" })
[skill_effect_duration_+%_per_frenzy_charge]
mod = mod("Duration", "INC", {val}, 0, 0, { type = "Multiplier", var = "FrenzyCharge" })
[skill_effect_duration_+%]
mod = mod("Duration", "INC", {val})
[fortify_duration_+%]
mod = mod("FortifyDuration", "INC", {val})
[skill_effect_and_damaging_ailment_duration_+%]
mod = mod("SkillAndDamagingAilmentDuration", "INC", {val})
# Damage
[damage_+%]
mod = mod("Damage", "INC", {val}, 0, 0, {global})
[physical_damage_+%]
mod = mod("PhysicalDamage", "INC", {val})
[lightning_damage_+%]
mod = mod("LightningDamage", "INC", {val})
[cold_damage_+%]
mod = mod("ColdDamage", "INC", {val})
[fire_damage_+%]
mod = mod("FireDamage", "INC", {val})
[chaos_damage_+%]
mod = mod("ChaosDamage", "INC", {val})
[elemental_damage_+%]
mod = mod("ElementalDamage", "INC", {val})
[damage_over_time_+%]
mod = mod("Damage", "INC", {val}, ModFlag.Dot)
[burn_damage_+%]
mod = mod("FireDamage", "INC", {val}, ModFlag.Dot)
[active_skill_damage_+%_final]
mod = mod("Damage", "MORE", {val})
[melee_physical_damage_+%]
mod = mod("PhysicalDamage", "INC", {val}, ModFlag.Melee)
[area_damage_+%]
mod = mod("Damage", "INC", {val}, ModFlag.Area)
[projectile_damage_+%]
mod = mod("Damage", "INC", {val}, ModFlag.Projectile)
[active_skill_projectile_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)
[active_skill_area_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Area)
[physical_damage_+%_per_frenzy_charge]
mod = mod("PhysicalDamage", "INC", {val}, 0, 0, { type = "Multiplier", var = "FrenzyCharge" })
[melee_damage_vs_bleeding_enemies_+%]
mod = mod("PhysicalDamage", "INC", {val}, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Bleeding" })
[damage_+%_vs_frozen_enemies]
mod = mod("Damage", "INC", {val}, ModFlag.Hit, 0, { type = "ActorCondition", actor = "enemy", var = "Frozen" })
[base_reduce_enemy_fire_resistance_%]
mod = mod("FirePenetration", "BASE", {val})
[base_reduce_enemy_cold_resistance_%]
mod = mod("ColdPenetration", "BASE", {val})
[base_reduce_enemy_lightning_resistance_%]
mod = mod("LightningPenetration", "BASE", {val})
[reduce_enemy_elemental_resistance_%]
mod = mod("ElementalPenetration", "BASE", {val})
[support_minimum_added_fire_damage_vs_burning_enemies]
mod = mod("FireMin", "BASE", {val}, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Burning" })
[support_maximum_added_fire_damage_vs_burning_enemies]
mod = mod("FireMax", "BASE", {val}, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Burning" })
[minimum_added_cold_damage_per_frenzy_charge]
mod = mod("ColdMin", "BASE", {val}, 0, 0, { type = "Multiplier", var = "FrenzyCharge" })
[maximum_added_cold_damage_per_frenzy_charge]
mod = mod("ColdMax", "BASE", {val}, 0, 0, { type = "Multiplier", var = "FrenzyCharge" })
[global_minimum_added_cold_damage]
mod = mod("ColdMin", "BASE", {val})
[global_maximum_added_cold_damage]
mod = mod("ColdMax", "BASE", {val})
[global_minimum_added_lightning_damage]
mod = mod("LightningMin", "BASE", {val})
[global_maximum_added_lightning_damage]
mod = mod("LightningMax", "BASE", {val})
[global_minimum_added_chaos_damage]
mod = mod("ChaosMin", "BASE", {val})
[global_maximum_added_chaos_damage]
mod = mod("ChaosMax", "BASE", {val})
[active_skill_if_used_through_frostbolt_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "Condition", var = "CastOnFrostbolt" })
# Conversion
[physical_damage_%_to_add_as_lightning]
mod = mod("PhysicalDamageGainAsLightning", "BASE", {val}, 0, 0, {global})
[physical_damage_%_to_add_as_cold]
mod = mod("PhysicalDamageGainAsCold", "BASE", {val}, 0, 0, {global})
[physical_damage_%_to_add_as_fire]
mod = mod("PhysicalDamageGainAsFire", "BASE", {val}, 0, 0, {global})
[physical_damage_%_to_add_as_chaos]
mod = mod("PhysicalDamageGainAsChaos", "BASE", {val}, 0, 0, {global})
[cold_damage_%_to_add_as_fire]
mod =  mod("ColdDamageGainAsFire", "BASE", {val})
[base_physical_damage_%_to_convert_to_lightning]
mod = mod("PhysicalDamageConvertToLightning", "BASE", {val}, 0, 0, {global})
[base_physical_damage_%_to_convert_to_cold]
mod = mod("PhysicalDamageConvertToCold", "BASE", {val}, 0, 0, {global})
[base_physical_damage_%_to_convert_to_fire]
mod = mod("PhysicalDamageConvertToFire", "BASE", {val}, 0, 0, {global})
[base_physical_damage_%_to_convert_to_chaos]
mod = mod("PhysicalDamageConvertToChaos", "BASE", {val}, 0, 0, {global})
[skill_physical_damage_%_to_convert_to_lightning]
mod = mod("SkillPhysicalDamageConvertToLightning", "BASE", {val})
[skill_physical_damage_%_to_convert_to_cold]
mod = mod("SkillPhysicalDamageConvertToCold", "BASE", {val})
[skill_physical_damage_%_to_convert_to_fire]
mod = mod("SkillPhysicalDamageConvertToFire", "BASE", {val})
[skill_physical_damage_%_to_convert_to_chaos]
mod = mod("SkillPhysicalDamageConvertToChaos", "BASE", {val})
[skill_cold_damage_%_to_convert_to_fire]
mod = mod("SkillColdDamageConvertToFire", "BASE", {val})
# Ailments
[bleed_on_hit_with_attacks_%]
mod = mod("BleedChance", "BASE", {val}, ModFlag.Attack)
[global_bleed_on_hit]
mod = mod("BleedChance", "BASE", 100)
[base_chance_to_poison_on_hit_%]
mod = mod("PoisonChance", "BASE", {val})
[global_poison_on_hit]
mod = mod("PoisonChance", "BASE", 100)
[base_chance_to_ignite_%]
mod = mod("EnemyIgniteChance", "BASE", {val})
[base_chance_to_shock_%]
mod = mod("EnemyShockChance", "BASE", {val})
[base_chance_to_freeze_%]
mod = mod("EnemyFreezeChance", "BASE", {val})
[chance_to_freeze_shock_ignite_%]
mod = { mod("EnemyFreezeChance", "BASE", {val}), mod("EnemyShockChance", "BASE", {val}), mod("EnemyIgniteChance", "BASE", {val}) }
[additional_chance_to_freeze_chilled_enemies_%]
mod = mod("EnemyFreezeChance", "BASE", {val}, ModFlag.Hit, 0, { type = "ActorCondition", actor = "enemy", var = "Chilled" })
[cannot_inflict_status_ailments]
mod = { flag("CannotShock"), flag("CannotChill"), flag("CannotFreeze"), flag("CannotIgnite") }
[chill_effect_+%]
mod = mod("EnemyChillEffect", "INC", {val})
[shock_effect_+%]
mod = mod("EnemyShockEffect", "INC", {val})
[base_poison_duration_+%]
mod = mod("EnemyPoisonDuration", "INC", {val})
[ignite_duration_+%]
mod = mod("EnemyIgniteDuration", "INC", {val})
[shock_duration_+%]
mod = mod("EnemyShockDuration", "INC", {val})
[chill_duration_+%]
mod = mod("EnemyChillDuration", "INC", {val})
[freeze_duration_+%]
mod = mod("EnemyFreezeDuration", "INC", {val})
[base_elemental_status_ailment_duration_+%]
mod = { mod("EnemyIgniteDuration", "INC", {val}), mod("EnemyShockDuration", "INC", {val}), mod("EnemyChillDuration", "INC", {val}), mod("EnemyFreezeDuration", "INC", {val}) }
[base_all_ailment_duration_+%]
mod = { mod("EnemyBleedDuration", "INC", {val}), mod("EnemyPoisonDuration", "INC", {val}), mod("EnemyIgniteDuration", "INC", {val}), mod("EnemyShockDuration", "INC", {val}), mod("EnemyChillDuration", "INC", {val}), mod("EnemyFreezeDuration", "INC", {val}) }
[bleeding_damage_+%]
mod = mod("Damage", "INC", {val}, 0, KeywordFlag.Bleed)
[base_poison_damage_+%]
mod = mod("Damage", "INC", {val}, 0, KeywordFlag.Poison)
# Global flags
[never_ignite]
mod = flag("CannotIgnite")
[never_shock]
mod = flag("CannotShock")
[never_freeze]
mod = flag("CannotFreeze")
[cannot_cause_bleeding]
mod = flag("CannotBleed")
[keystone_strong_bowman]
mod = flag("IronGrip")
[strong_casting]
mod = flag("IronWill")
[deal_no_elemental_damage]
mod = { flag("DealNoFire"), flag("DealNoCold"), flag("DealNoLightning") }
[base_deal_no_chaos_damage]
mod = flag("DealNoChaos")
# Other effects
[base_stun_threshold_reduction_+%]
mod = mod("EnemyStunThreshold", "INC", {val})
mult = -1
[base_stun_duration_+%]
mod = mod("EnemyStunDuration", "INC", {val})
[base_killed_monster_dropped_item_quantity_+%]
mod = mod("LootQuantity", "INC", {val})
[base_killed_monster_dropped_item_rarity_+%]
mod = mod("LootRarity", "INC", {val})
[global_knockback]
mod = mod("EnemyKnockbackChance", "BASE", 100)
[base_global_chance_to_knockback_%]
mod = mod("EnemyKnockbackChance", "BASE", {val})
[knockback_distance_+%]
mod = mod("EnemyKnockbackDistance", "INC", {val})
# Projectiles
[base_projectile_speed_+%]
mod = mod("ProjectileSpeed", "INC", {val})
[projectile_base_number_of_targets_to_pierce]
mod = mod("PierceCount", "BASE", {val})
[arrow_base_number_of_targets_to_pierce]
mod = mod("PierceCount", "BASE", {val}, ModFlag.Attack)
[pierce_%]
mod = mod("PierceChance", "BASE", {val})
[always_pierce]
mod = flag("PierceAllTargets")
[base_number_of_additional_arrows]
[number_of_additional_projectiles]
mod = mod("ProjectileCount", "BASE", {val})
[number_of_additional_projectiles_in_chain]
mod = mod("ChainCountMax", "BASE", {val})
[projectiles_always_pierce_you]
mod = flag("AlwaysPierceSelf", {global})
# Self modifiers
[chance_to_be_pierced_%]
mod = mod("SelfPierceChance", "BASE", {val}, 0, 0, {global})
[projectile_damage_taken_+%]
mod = mod("ProjectileDamageTaken", "INC", {val}, 0, 0, {global})
[physical_damage_taken_+%]
mod = mod("PhysicalDamageTaken", "INC", {val}, 0, 0, {global})
[chaos_damage_taken_+%]
mod = mod("ChaosDamageTaken", "INC", {val}, 0, 0, {global})
[base_physical_damage_over_time_taken_+%]
mod = mod("PhysicalDamageTakenOverTime", "INC", {val}, 0, 0, {global})
[degen_effect_+%]
mod = mod("DamageTakenOverTime", "INC", {val}, 0, 0, {global})
[buff_time_passed_-%]
mod = mod("BuffExpireFaster", "MORE", {val}, 0, 0, {global})
mult = -1
[additional_chance_to_take_critical_strike_%]
mod = mod("SelfExtraCritChance", "BASE", {val}, 0, 0, {global})
[base_self_critical_strike_multiplier_-%]
mod = mod("SelfCritMultiplier", "INC", {val}, 0, 0, {global})
mult = -1
[chance_to_be_shocked_%]
mod = mod("SelfShockChance", "BASE", {val}, 0, 0, {global})
[chance_to_be_ignited_%]
mod = mod("SelfIgniteChance", "BASE", {val}, 0, 0, {global})
[chance_to_be_frozen_%]
mod = mod("SelfFreezeChance", "BASE", {val}, 0, 0, {global})
[receive_bleeding_chance_%_when_hit_by_attack]
mod = mod("SelfBleedChance", "BASE", {val}, 0, 0, {global})
[base_self_shock_duration_-%]
mod = mod("SelfShockDuration", "INC", {val}, 0, 0, {global})
mult = -1
[base_self_ignite_duration_-%]
mod = mod("SelfIgniteDuration", "INC", {val}, 0, 0, {global})
mult = -1
[base_self_freeze_duration_-%]
mod = mod("SelfFreezeDuration", "INC", {val}, 0, 0, {global})
mult = -1
[life_leech_on_any_damage_when_hit_permyriad]
mod = mod("SelfDamageLifeLeech", "BASE", {val}, 0, 0, {global})
[mana_leech_on_any_damage_when_hit_permyriad]
mod = mod("SelfDamageManaLeech", "BASE", {val}, 0, 0, {global})
[life_granted_when_hit_by_attacks]
mod = mod("SelfLifeOnHit", "BASE", {val}, ModFlag.Attack, 0, {global})
[mana_granted_when_hit_by_attacks]
mod = mod("SelfManaOnHit", "BASE", {val}, ModFlag.Attack, 0, {global})
[life_granted_when_killed]
mod = mod("SelfLifeOnKill", "BASE", {val}, 0, 0, {global})
[mana_granted_when_killed]
mod = mod("SelfManaOnKill", "BASE", {val}, 0, 0, {global})
# Degen
[base_physical_damage_%_of_maximum_life_to_deal_per_minute]
mod = mod("PhysicalDegen", "BASE", {val}, 0, 0, { type = "PerStat", stat = "Life", div = 1}, {global})
div = 6000
[base_physical_damage_%_of_maximum_energy_shield_to_deal_per_minute]
mod = mod("PhysicalDegen", "BASE", {val}, 0, 0, { type = "PerStat", stat = "EnergyShield", div = 1}, {global})
div = 6000
[base_nonlethal_fire_damage_%_of_maximum_life_taken_per_minute]
mod = mod("FireDegen", "BASE", {val}, 0, 0, { type = "PerStat", stat = "Life", div = 1}, {global})
div = 6000
[base_nonlethal_fire_damage_%_of_maximum_energy_shield_taken_per_minute]
mod = mod("FireDegen", "BASE", {val}, 0, 0, { type = "PerStat", stat = "EnergyShield", div = 1}, {global})
div = 6000

#
# Attack modifiers
#
[attack_speed_+%]
mod = mod("Speed", "INC", {val}, ModFlag.Attack, 0, {global})
[active_skill_attack_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Attack)
[base_attack_speed_+%_per_frenzy_charge]
mod = mod("Speed", "INC", {val}, ModFlag.Attack, 0, { type = "Multiplier", var = "FrenzyCharge" })
[accuracy_rating]
mod = mod("Accuracy", "BASE", {val}, 0, 0, {curse})
[accuracy_rating_+%]
mod = mod("Accuracy", "INC", {val}, 0, 0, {curse})
[attack_damage_+%]
mod = mod("Damage", "INC", {val}, ModFlag.Attack)
[elemental_damage_with_attack_skills_+%]
mod = mod("ElementalDamage", "INC", {val}, 0, KeywordFlag.Attack)
[attack_minimum_added_physical_damage]
mod = mod("PhysicalMin", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_maximum_added_physical_damage]
mod = mod("PhysicalMax", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_minimum_added_physical_damage_with_weapons]
mod = mod("PhysicalMin", "BASE", {val}, ModFlag.Weapon, KeywordFlag.Attack, {global})
[attack_maximum_added_physical_damage_with_weapons]
mod = mod("PhysicalMax", "BASE", {val}, ModFlag.Weapon, KeywordFlag.Attack, {global})
[attack_minimum_added_lightning_damage]
mod = mod("LightningMin", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_maximum_added_lightning_damage]
mod = mod("LightningMax", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_minimum_added_cold_damage]
mod = mod("ColdMin", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_maximum_added_cold_damage]
mod = mod("ColdMax", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_minimum_added_fire_damage]
mod = mod("FireMin", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_maximum_added_fire_damage]
mod = mod("FireMax", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_minimum_added_chaos_damage]
mod = mod("ChaosMin", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[attack_maximum_added_chaos_damage]
mod = mod("ChaosMax", "BASE", {val}, 0, KeywordFlag.Attack, {global})
[melee_weapon_range_+]
mod = mod("MeleeWeaponRange", "BASE", {val})
[melee_range_+]
mod = { mod("MeleeWeaponRange", "BASE", {val}), mod("UnarmedRange", "BASE", {val}) }

#
# Spell modifiers
#
[base_cast_speed_+%]
mod = mod("Speed", "INC", {val}, ModFlag.Cast)
[active_skill_cast_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Cast)
[spell_damage_+%]
mod = mod("Damage", "INC", {val}, ModFlag.Spell, 0, {global})
[spell_minimum_added_physical_damage]
mod = mod("PhysicalMin", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_maximum_added_physical_damage]
mod = mod("PhysicalMax", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_minimum_added_lightning_damage]
mod = mod("LightningMin", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_maximum_added_lightning_damage]
mod = mod("LightningMax", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_minimum_added_cold_damage]
mod = mod("ColdMin", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_maximum_added_cold_damage]
mod = mod("ColdMax", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_minimum_added_fire_damage]
mod = mod("FireMin", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_maximum_added_fire_damage]
mod = mod("FireMax", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_minimum_added_chaos_damage]
mod = mod("ChaosMin", "BASE", {val}, 0, KeywordFlag.Spell, {global})
[spell_maximum_added_chaos_damage]
mod = mod("ChaosMax", "BASE", {val}, 0, KeywordFlag.Spell, {global})

#
# Skill type modifier
#
# Trap
[trap_damage_+%]
mod = mod("Damage", "INC", {val}, 0, KeywordFlag.Trap)
[number_of_additional_traps_allowed]
mod = mod("ActiveTrapLimit", "BASE", {val})
[trap_throwing_speed_+%]
mod = mod("TrapThrowingSpeed", "INC", {val})
[placing_traps_cooldown_recovery_+%]
mod = mod("CooldownRecovery", "INC", {val}, 0, KeywordFlag.Trap)
[trap_trigger_radius_+%]
mod = mod("TrapTriggerAreaOfEffect", "INC", {val})
# Mine
[number_of_additional_remote_mines_allowed]
mod = mod("ActiveMineLimit", "BASE", {val})
[mine_laying_speed_+%]
mod = mod("MineLayingSpeed", "INC", {val})
[mine_detonation_radius_+%]
mod = mod("MineDetonationAreaOfEffect", "INC", {val})
# Totem
[totem_damage_+%]
mod = mod("Damage", "INC", {val}, 0, KeywordFlag.Totem)
[totem_life_+%]
mod = mod("TotemLife", "INC", {val})
[number_of_additional_totems_allowed]
mod = mod("ActiveTotemLimit", "BASE", {val})
[summon_totem_cast_speed_+%]
mod = mod("TotemPlacementSpeed", "INC", {val})
# Minion
[minion_damage_+%]
mod = mod("MinionModifier", "LIST", { mod = mod("Damage", "INC", {val}) })
[minion_maximum_life_+%]
mod = mod("MinionModifier", "LIST", { mod = mod("Life", "INC", {val}) })
[minion_movement_speed_+%]
mod = mod("MinionModifier", "LIST", { mod = mod("MovementSpeed", "INC", {val}) })
[minion_attack_speed_+%]
mod = mod("MinionModifier", "LIST", { mod = mod("Speed", "INC", {val}, ModFlag.Attack) })
[minion_cast_speed_+%]
mod = mod("MinionModifier", "LIST", { mod = mod("Speed", "INC", {val}, ModFlag.Cast) })
[minion_elemental_resistance_%]
mod = mod("MinionModifier", "LIST", { mod = mod("ElementalResist", "BASE", {val}) })
[minion_elemental_resistance_30%]
mod = mod("MinionModifier", "LIST", { mod = mod("ElementalResist", "BASE", 30) })
[summon_fire_resistance_+]
mod = mod("MinionModifier", "LIST", { mod = mod("FireResist", "BASE", {val}) })
[summon_cold_resistance_+]
mod = mod("MinionModifier", "LIST", { mod = mod("ColdResist", "BASE", {val}) })
[summon_lightning_resistance_+]
mod = mod("MinionModifier", "LIST", { mod = mod("LightningResist", "BASE", {val}) })
[base_number_of_zombies_allowed]
mod = mod("ActiveZombieLimit", "BASE", {val})
[base_number_of_skeletons_allowed]
mod = mod("ActiveSkeletonLimit", "BASE", {val})
[base_number_of_raging_spirits_allowed]
mod = mod("ActiveRagingSpiritLimit", "BASE", {val})
[base_number_of_golems_allowed]
mod = mod("ActiveGolemLimit", "BASE", {val})
[base_number_of_spectres_allowed]
mod = mod("ActiveSpectreLimit", "BASE", {val})
[number_of_wolves_allowed]
mod = mod("ActiveWolfLimit", "BASE", {val})
[number_of_spider_minions_allowed]
mod = mod("ActiveSpiderLimit", "BASE", {val})
[active_skill_minion_damage_+%_final]
mod = mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", {val}) })
[active_skill_minion_life_+%_final]
mod = mod("MinionModifier", "LIST", { mod = mod("Life", "MORE", {val}) })
[active_skill_minion_energy_shield_+%_final]
mod = mod("MinionModifier", "LIST", { mod = mod("EnergyShield", "MORE", {val}) })
[active_skill_minion_movement_velocity_+%_final]
mod = mod("MinionModifier", "LIST", { mod = mod("MovementSpeed", "MORE", {val}) })
# Curse
[curse_effect_+%]
mod = mod("CurseEffect", "INC", {val})
[curse_effect_+%_vs_players]
mod = mod("CurseEffectAgainstPlayer", "INC", {val})
[curse_area_of_effect_+%]
mod = mod("AreaOfEffect", "INC", {val}, 0, KeywordFlag.Curse)
[base_curse_duration_+%]
mod = mod("Duration", "INC", {val}, 0, KeywordFlag.Curse)
# Aura
[non_curse_aura_effect_+%]
mod = mod("AuraEffect", "INC", {val})

#
# Active skill-specific modifiers
#
# Ancestral Protector
[melee_ancestor_totem_grant_owner_attack_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "Buff" })
# Ancestral Warchief
[slam_ancestor_totem_grant_owner_melee_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Melee, 0, { type = "GlobalEffect", effectType = "Buff" })
# Arctic Armour
[new_arctic_armour_physical_damage_taken_when_hit_+%_final]
mod = mod("PhysicalDamageTakenWhenHit", "MORE", {val}, 0, 0, { type = "Condition", var = "Stationary" }, { type = "GlobalEffect", effectType = "Buff" })
[new_arctic_armour_fire_damage_taken_when_hit_+%_final]
mod = mod("FireDamageTakenWhenHit", "MORE", {val}, 0, 0, { type = "Condition", var = "Stationary" }, { type = "GlobalEffect", effectType = "Buff" })
# Aspect of the Crab
[physical_damage_reduction_%_per_crab_aspect_stack]
mod = mod("PhysicalDamageReduction", "BASE", {val}, 0, 0, { type = "Multiplier", var = "CrabBarrier" }, { type = "GlobalEffect", effectType = "Buff" })
[max_crab_aspect_stacks]
mod = mod("CrabBarriersMax", "BASE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Aspect of the Spider
[spider_aspect_max_web_count]
mod = mod("Multiplier:SpiderWebApplyStackMax", "BASE", {val})
# Blade Vortex
[blade_vortex_damage_+%_per_blade_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Hit, { type = "Multiplier", var = "BladeVortexBlade" })
[blade_vortex_ailment_damage_+%_per_blade_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Ailment, { type = "Multiplier", var = "BladeVortexBlade" })
# Charged Dash
[charged_dash_damage_+%_maximum]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Hit, KeywordFlag.Ailment), { type = "Multiplier", var = "ChargedDashDistance" })
# Cleave
[cleave_damage_+%_final_while_dual_wielding]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "Condition", var = "DualWielding" })
# Cyclone
[cyclone_movement_speed_+%_final]
mod = mod("MovementSpeed", "MORE", {val})
# Dark Pact
[skeletal_chains_aoe_%_health_dealt_as_chaos_damage]
mod = skill("lifeDealtAsChaos", {val})
[skeletal_chains_no_minions_radius_+]
mod = skill("radiusExtra", {val}, { type = "SkillPart", skillPart = 1 })
[skeletal_chains_no_minions_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Hit, KeywordFlag.Ailment), { type = "SkillPart", skillPart = 1 })
# Determination
[determination_aura_armour_+%_final]
mod = mod("Armour", "MORE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Aura" })
# Devouring Totem
[corpse_consumption_life_to_gain]
mod = skill("lifeLeechPerUse", {val})
[corpse_consumption_mana_to_gain]
mod = skill("manaLeechPerUse", {val})
# Discharge
[discharge_triggered_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell, 0, { type = "Condition", var = "SkillIsTriggered" })
# Earthquake
[quake_slam_fully_charged_explosion_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit, 0, { type = "SkillPart", skillPart = 2 })
# Elemental Hit
[attack_minimum_base_fire_damage_for_elemental_hit]
mod = mod("FireMin", "BASE", {val}, 0, KeywordFlag.Attack, { type = "SkillPart", skillPart = 1 })
[attack_maximum_base_fire_damage_for_elemental_hit]
mod = mod("FireMax", "BASE", {val}, 0, KeywordFlag.Attack, { type = "SkillPart", skillPart = 1 })
[attack_minimum_base_cold_damage_for_elemental_hit]
mod = mod("ColdMin", "BASE", {val}, 0, KeywordFlag.Attack, { type = "SkillPart", skillPart = 2 })
[attack_maximum_base_cold_damage_for_elemental_hit]
mod = mod("ColdMax", "BASE", {val}, 0, KeywordFlag.Attack, { type = "SkillPart", skillPart = 2 })
[attack_minimum_base_lightning_damage_for_elemental_hit]
mod = mod("LightningMin", "BASE", {val}, 0, KeywordFlag.Attack, { type = "SkillPart", skillPart = 3 })
[attack_maximum_base_lightning_damage_for_elemental_hit]
mod = mod("LightningMax", "BASE", {val}, 0, KeywordFlag.Attack, { type = "SkillPart", skillPart = 3 })
# Enfeeble
[enfeeble_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Curse" })
# Explosive Arrow
[minimum_fire_damage_per_fuse_arrow_orb]
mod = skill("FireMin", {val}, { type = "Multiplier", var = "ExplosiveArrowFuse" })
[maximum_fire_damage_per_fuse_arrow_orb]
mod = skill("FireMax", {val}, { type = "Multiplier", var = "ExplosiveArrowFuse" })
[fuse_arrow_explosion_radius_+_per_fuse_arrow_orb]
mod = skill("radiusExtra", {val}, { type = "Multiplier", var = "ExplosiveArrowFuse" })
# Flame Surge
[flame_whip_damage_+%_final_vs_burning_enemies]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit, 0, { type = "ActorCondition", actor = "enemy", var = "Burning" })
# Flameblast
[charged_blast_spell_damage_+%_final_per_stack]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Hit, { type = "Multiplier", var = "FlameblastStage" })
[flameblast_ailment_damage_+%_final_per_stack]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Ailment, { type = "Multiplier", var = "FlameblastStage" })
# Flicker Strike
[flicker_strike_more_attack_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Attack)
# Haste
[cast_speed_+%_from_haste_aura]
mod = mod("Speed", "INC", {val}, ModFlag.Cast, 0, {global})
# Herald of Ash
[herald_of_ash_fire_damage_+%]
mod = mod("FireDamage", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
[herald_of_ash_spell_fire_damage_+%_final]
mod = mod("FireDamage", "MORE", {val}, ModFlag.Spell, 0, { type = "GlobalEffect", effectType = "Buff" })
# Herald of Ice
[herald_of_ice_cold_damage_+%]
mod = mod("ColdDamage", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Herald of Thunder
[herald_of_thunder_lightning_damage_+%]
mod = mod("LightningDamage", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Ice Crash
[ice_crash_second_hit_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 2 })
[ice_crash_third_hit_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 3 })
# Ice Spear
[ice_spear_second_form_critical_strike_chance_+%]
mod = mod("CritChance", "INC", {val}, 0, 0, { type = "SkillPart", skillPart = 2 })
# Vaal Lightning Strike
[vaal_lightning_strike_beam_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 2 })
# Phase Run
[phase_run_melee_physical_damage_+%_final]
mod = mod("PhysicalDamage", "MORE", {val}, ModFlag.Melee, 0, { type = "SkillType", skillType = SkillType.Totem, neg = true }, { type = "GlobalEffect", effectType = "Buff" })
# Poacher's Mark
[evasion_rating_+%_final_from_poachers_mark]
mod = mod("Evasion", "MORE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Curse" })
# Punishment
[newpunishment_attack_speed_+%]
mod = mod("Speed", "INC", {val}, ModFlag.Attack, 0, { type = "GlobalEffect", effectType = "CurseBuff" })
[newpunishment_melee_damage_+%_final]
mod = mod("PhysicalDamage", "MORE", {val}, ModFlag.Melee, 0, { type = "GlobalEffect", effectType = "CurseBuff" })
# Reave
[reave_area_of_effect_+%_final_per_stage]
mod = mod("AreaOfEffect", "MORE", {val}, 0, 0, { type = "Multiplier", var = "ReaveStage" })
# Righteous Fire
[righteous_fire_spell_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell, 0, {global})
# Shock Nova
[newshocknova_first_ring_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 1 })
# Spectral Shield Throw
[thrown_shield_secondary_projectile_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 2 })
[override_off_hand_base_critical_strike_chance_to_5%]
mod = skill("setOffHandBaseCritChance", 5)
[off_hand_local_minimum_added_physical_damage]
mod = skill("setOffHandPhysicalMin", {val})
[off_hand_local_maximum_added_physical_damage]
mod = skill("setOffHandPhysicalMax", {val})
[off_hand_base_weapon_attack_duration_ms]
mod = skill("setOffHandAttackTime", {val})
[off_hand_minimum_added_physical_damage_per_15_shield_armour_and_evasion_rating]
mod = mod("PhysicalMin", "BASE", {val}, 0, 0, { type = "Condition", var = "OffHandAttack" }, { type = "PerStat", statList = { "ArmourOnWeapon 2", "EvasionOnWeapon 2" }, div = 15 })
[off_hand_maximum_added_physical_damage_per_15_shield_armour_and_evasion_rating]
mod = mod("PhysicalMax", "BASE", {val}, 0, 0, { type = "Condition", var = "OffHandAttack" }, { type = "PerStat", statList = { "ArmourOnWeapon 2", "EvasionOnWeapon 2" }, div = 15 })
[additional_critical_strike_chance_per_10_shield_maximum_energy_shield_permyriad]
mod = mod("CritChance", "BASE", {val}, 0, 0, { type = "PerStat", stat = "EnergyShieldOnWeapon 2", div = 10 })
div = 100
# Static Strike
[static_strike_explosion_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 2 })
# Summon Chaos Golem
[chaos_golem_grants_additional_physical_damage_reduction_%]
mod = mod("PhysicalDamageReduction", "BASE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Summon Fire Golem
[fire_golem_grants_damage_+%]
mod = mod("Damage", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Summon Ice Golem
[ice_golem_grants_critical_strike_chance_+%]
mod = mod("CritChance", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
[ice_golem_grants_accuracy_+%]
mod = mod("Accuracy", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Summon Lightning Golem
[lightning_golem_grants_attack_and_cast_speed_+%]
mod = mod("Speed", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
# Summon Stone Golem
[stone_golem_grants_base_life_regeneration_rate_per_minute]
mod = mod("LifeRegen", "BASE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff" })
div = 60
# Sunder
[shockwave_slam_explosion_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillPart", skillPart = 2 })
# Tectonic Stam
[endurance_charge_slam_damage_+%_final_with_endurance_charge]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "StatThreshold", stat = "EnduranceCharges", threshold = 1 })
# Temporal Chains
[temporal_chains_action_speed_+%_final]
mod = mod("TemporalChainsActionSpeed", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Curse" })
# Wrath
[wrath_aura_spell_lightning_damage_+%_final]
mod = mod("LightningDamage", "MORE", {val}, ModFlag.Spell, 0, { type = "GlobalEffect", effectType = "Aura" })

#
# Support skill-specific modifiers
#
# Ancestral Call
[support_spirit_strike_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Arcane Surge
[support_arcane_surge_cast_speed_+%]
mod = mod("Speed", "INC", {val}, ModFlag.Cast, 0, { type = "Condition", var = "GainArcaneSurge" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge" })
[support_arcane_surge_mana_regeneration_rate_per_minute_%]
mod = mod("ManaRegenPercent", "BASE", {val}, 0, 0, { type = "Condition", var = "GainArcaneSurge" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge" })
div = 60
[support_arcane_surge_spell_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell, 0, { type = "Condition", var = "GainArcaneSurge" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge" })
# Bloodlust
[support_bloodlust_melee_physical_damage_+%_final_vs_bleeding_enemies]
mod = mod("PhysicalDamage", "MORE", {val}, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Bleeding" })
# Brutality
[support_brutality_physical_damage_+%_final]
mod = mod("PhysicalDamage", "MORE", {val})
# Burning Damage
[support_burning_damage_+%_final]
mod = mod("FireDamage", "MORE", {val}, ModFlag.Dot)
# Cats on Critical Strike
[support_cast_on_crit_spell_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell)
# Cats on Damage Taken
[cast_on_damage_taken_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Cast on Limited Hardcore Viability
[area_of_effect_+%_while_dead]
mod = mod("AreaOfEffect", "INC", {val})
[cast_on_death_damage_+%_final_while_dead]
mod = mod("Damage", "MORE", {val})
# Cats on Melee Kill
[support_cast_on_melee_kill_spell_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell)
# Cats while Channelling
[cast_while_channelling_time_ms]
mod = skill("timeOverride", nil, { type = "SkillType", skillType = SkillType.TriggerableSpell })
div = 1000
[support_cast_while_channelling_triggered_skill_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "SkillType", skillType = SkillType.TriggerableSpell })
# Chain
[support_chain_hit_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit)
# Chance to Bleed
[support_chance_to_bleed_bleeding_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Bleed)
# Chance to Ignite
[support_chance_to_ignite_fire_damage_+%_final]
mod = mod("FireDamage", "MORE", {val})
# Concentrated Effect
[support_concentrated_effect_skill_area_of_effect_+%_final]
mod = mod("AreaOfEffect", "MORE", {val})
[support_area_concentrate_area_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Area)
# Controlled Destruction
[support_controlled_destruction_spell_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell)
# Cluster Traps
[support_clustertrap_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Damage on Full Life
[support_damage_while_on_full_life_+%_final]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "Condition", var = "FullLife" })
# Deadly Ailments
[support_better_ailments_hit_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit)
[support_better_ailments_ailment_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison, KeywordFlag.Ignite))
# Efficacy
[support_efficacy_spell_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Spell)
[support_efficacy_damage_over_time_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Dot)
# Elemental Damage with Attacks
[support_attack_skills_elemental_damage_+%_final]
mod = mod("ElementalDamage", "MORE", {val}, 0, KeywordFlag.Attack)
# Elemental Focus
[support_gem_elemental_damage_+%_final]
mod = mod("ElementalDamage", "MORE", {val})
# Elemental Proliferation
[support_elemental_proliferation_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Empower
[supported_active_skill_gem_level_+]
mod = mod("GemProperty", "LIST", { keyword = "active_skill", key = "level", value = {val} })
# Endurance Charge on Melee Stun
[endurance_charge_on_melee_stun_damage_+%_final_per_endurance_charge]
mod = mod("Damage", "MORE", {val}, 0, 0, { type = "Multiplier", var = "EnduranceCharge" })
# Enhance
[supported_active_skill_gem_quality_%]
mod = mod("GemProperty", "LIST", { keyword = "active_skill", key = "quality", value = {val} })
# Fork
[support_fork_projectile_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)
# Generosity
[aura_cannot_affect_self]
mod = skill("auraCannotAffectSelf", true)
# Greater Multiple Projectiles
[support_multiple_projectile_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)
# Hypothermia
[support_hypothermia_damage_+%_vs_chilled_enemies_final]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Hit, KeywordFlag.Ailment), { type = "ActorCondition", actor = "enemy", var = "Chilled" })
# Ignite Proliferation
[support_ignite_prolif_ignite_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Ignite)
# Innervate
[support_innervate_minimum_added_lightning_damage]
mod = mod("LightningMin", "BASE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervation", effectCond = "InnervationActive" })
[support_innervate_maximum_added_lightning_damage]
mod = mod("LightningMax", "BASE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervation", effectCond = "InnervationActive" })
# Lesser Multiple Projectiles
[support_lesser_multiple_projectile_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)
# Less Duration
[support_reduced_duration_skill_effect_duration_+%_final]
mod = mod("Duration", "MORE", {val})
[support_reduced_duration_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Maim
[support_maim_chance_physical_damage_+%_final]
mod = mod("PhysicalDamage", "MORE", {val})
[support_maimed_enemies_physical_damage_taken_+%]
mod = mod("PhysicalDamageTaken", "INC", {val}, 0, 0, { type = "GlobalEffect", effectType = "Debuff", effectName = "Maim" }, { type = "Condition", var = "Maimed" })
# Melee Physical Damage
[support_melee_physical_damage_+%_final]
mod = mod("PhysicalDamage", "MORE", {val}, ModFlag.Melee)
[support_melee_physical_damage_poison_and_bleeding_damage_+%_final_from_melee_hits]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison))
# Melee Spash
# [melee_splash_area_of_effect_+%_final]
# mod = mod("AreaOfEffect", "MORE", {val}, ModFlag.Melee)
# Minefield
[support_minefield_mine_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Minion Damage
[support_minion_damage_+%_final]
mod = mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", {val}) })
# Minion Life
[support_minion_maximum_life_+%_final]
mod = mod("MinionModifier", "LIST", { mod = mod("Life", "MORE", {val}) })
# Minion and Totem Elemental Resistance
[support_minion_totem_resistance_elemental_damage_+%_final]
mod = { mod("ElementalDamage", "MORE", {val}, 0, KeywordFlag.Totem), mod("MinionModifier", "LIST", { mod = mod("ElementalDamage", "MORE", {val}) }) }
# Mjolner
[triggered_spell_spell_damage_+%]
mod = mod("Damage", "INC", {val}, ModFlag.Spell, 0, { type = "Condition", var = "SkillIsTriggered" })
# Multiple Traps
[support_multithrow_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Multistrike
[support_multiple_attack_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Attack)
[support_multiple_attacks_melee_attack_speed_+%_final]
mod = mod("Speed", "MORE", {val}, bit.bor(ModFlag.Attack, ModFlag.Melee))
# Physical Projectile Attack Damage
[support_projectile_attack_speed_+%_final]
mod = mod("Speed", "MORE", {val}, bit.bor(ModFlag.Attack, ModFlag.Projectile))
[support_projectile_attack_physical_damage_+%_final]
mod = mod("PhysicalDamage", "MORE", {val}, bit.bor(ModFlag.Attack, ModFlag.Projectile))
[support_phys_proj_attack_damage_bleeing_and_poison_damage_+%_final_from_projectile_hits]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison))
# Pierce
[support_pierce_projectile_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)
# Point Blank
[keystone_point_blank]
mod = flag("PointBlank")
# Poison
[support_poison_poison_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Poison)
# Ranged Attack Totem
[support_attack_totem_attack_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Attack)
[support_totem_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Rapid Decay
[support_rapid_decay_damage_over_time_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Dot)
# Remote Mine
[support_gem_mine_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Mine)
[support_remote_mine_hit_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit, KeywordFlag.Mine)
# Ruthless
[support_ruthless_big_hit_stun_base_duration_override_ms]
mod = skill("baseStunDuration", {val})
div = 1000
[support_ruthless_big_hit_max_count]
mod = mod("RuthlessBlowMaxCount", "BASE", {val})
[support_ruthless_big_hit_damage_+%_final]
mod = mod("RuthlessBlowMultiplier", "BASE", {val}, ModFlag.Melee)
# Slower Projectiles
[support_slower_projectiles_projectile_speed_+%_final]
mod = mod("ProjectileSpeed", "MORE", {val})
[support_slower_projectiles_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)
# Spell Cascade
[support_spell_cascade_area_of_effect_+%_final]
mod = mod("AreaOfEffect", "MORE", {val})
[support_spell_cascade_damage_+%_final]
mod = mod("Damage", "MORE", {val})
# Spell Echo
[support_echo_damage_+%_final]
mod = mod("Damage", "MORE", {val})
[support_multicast_cast_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Cast)
# Spell Totem
[support_spell_totem_cast_speed_+%_final]
mod = mod("Speed", "MORE", {val}, ModFlag.Cast)
# Storm Barrier
[support_storm_barrier_physical_damage_taken_when_hit_+%_final]
mod = mod("PhysicalDamageTakenWhenHit", "MORE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Storm Barrier" })
[support_storm_barrier_lightning_damage_taken_when_hit_+%_final]
mod = mod("LightningDamageTakenWhenHit", "MORE", {val}, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Storm Barrier" })
# Trap
[support_trap_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Trap)
[support_trap_hit_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit, KeywordFlag.Trap)
# Trap and Mine Damage
[support_trap_and_mine_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Trap, KeywordFlag.Mine))
# Unbound Ailments
[support_unbound_ailments_ailment_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison, KeywordFlag.Ignite))
# Vile Toxins
[support_debilitate_poison_damage_+%_final]
mod = mod("Damage", "MORE", {val}, 0, KeywordFlag.Poison)
[support_debilitate_hit_damage_+%_final_per_poison_stack]
mod = mod("Damage", "MORE", {val}, ModFlag.Hit, 0, { type = "Multiplier", actor = "enemy", var = "PoisonStack", limitVar = "VileToxinsPoisonLimit" })
[support_debilitate_hit_damage_max_poison_stacks]
mod = mod("Multiplier:VileToxinsPoisonLimit", "BASE", nil)
# Void Manipulation
[support_void_manipulation_chaos_damage_+%_final]
mod = mod("ChaosDamage", "MORE", {val})
# Volley
[support_parallel_projectiles_damage_+%_final]
mod = mod("Damage", "MORE", {val}, ModFlag.Projectile)

#
# Monster skills
#
[whirling_blades_base_ground_fire_damage_to_deal_per_minute]
mod = skill("FireDot", {val})
div = 60